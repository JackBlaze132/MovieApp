# Nombre del pipeline
name: 'CI-Pipeline-SpringBoot'

# Definir el pool de agentes
pool:
  name: 'Self-hosted'  # Asegúrate de que el nombre del pool sea correcto

# Disparador para iniciar el pipeline automáticamente en cada push a la rama master
trigger:
  branches:
    include:
      - master  # Cambiado de "main" a "master"

# Fases del pipeline
steps:
  # Paso 1: Comprobar la versión de Java
  - script: |
      java -version
    displayName: 'Comprobar versión de Java'

  # Paso 2: Instalar dependencias Maven
  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'  # Asegúrate de que la ruta del archivo POM sea correcta
      goals: 'clean install'
    displayName: 'Instalar dependencias y compilar con Maven'

  # Paso 3: Ejecutar pruebas unitarias
  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      goals: 'test'
    displayName: 'Ejecutar pruebas unitarias'

  # Paso 4: Empaquetar el proyecto (opcional)
  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      goals: 'package'
    displayName: 'Empaquetar el proyecto'

  # Paso 5: Publicar resultados de pruebas (si existen)
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
    displayName: 'Publicar resultados de las pruebas'

  # Paso 6: Publicar el archivo .jar generado como artefacto
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/target/*.jar'  # Ruta hacia el .jar generado
      artifact: 'drop'
    displayName: 'Publicar artefacto generado (.jar)'
