name: CI-Pipeline-SpringBoot

on:
  push:
    branches:
      - master  # O main, si tu rama principal se llama "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17  # Configurar Java 17 (ajústalo si usas otra versión)
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Verify Java and Maven versions
        run: |
          java -version
          mvn -v

      - name: Cache Maven packages  # Cachear las dependencias de Maven para acelerar el build
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Install dependencies and compile with Maven  # Instalar dependencias y compilar
        run: mvn clean install

      - name: Run unit tests  # Ejecutar pruebas unitarias
        run: mvn test

      - name: Package the application  # Empaquetar la aplicación en un archivo JAR
        run: mvn package

      - name: Upload JAR artifact  # Subir el archivo JAR generado como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: jar-file
          path: target/*.jar

      - name: Install Heroku CLI  # Instalar Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Deploy to Heroku  # Desplegar a Heroku usando Heroku CLI
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}  # Usa el API Key de Heroku guardado en los secretos
        run: |
          heroku auth:token
          heroku deploy:jar target/*.jar --app ${{ secrets.HEROKU_APP_NAME }}
